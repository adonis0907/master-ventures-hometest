import { Fragment, useState, useEffect } from 'react'
import { useDispatch } from 'react-redux'
import type { NextPage } from 'next'
import Head from 'next/head'
import styled from 'styled-components'

import { submitAwards } from "@store/slices/award.slice"
import Nominee from "@components/awards/Nominee"
import ResultModal from "@components/awards/ResultModal"
import styles from "@styles/Awards.module.css"

interface BallotsInterface {
    items: BallotInterface[];
}

interface BallotInterface {
    id: string;
    title: string;
    items: Array<BallotItemInterface>;
    selected: string|null;
}

export interface BallotItemInterface {
    id: string;
    title: string;
    photoUrL: string;
}

export interface AwardedBallotInterface {
    title: string,
    selected: string
}

const MainTag = styled.main`
    position: relative;
`;

const Awards: NextPage = () => {
    const [ballots, setBallots] = useState<BallotInterface | any>([]);
    const [openResults, setOpenResults] = useState<Boolean>(false);
    const dispatch = useDispatch();
    
    useEffect(() => {
        (async () => {
            const response = await fetch('/api/ballots');
            if (!response.ok) {
                throw new Error(`Error: ${response.status}`);
            }
            const getBallots: BallotsInterface = await response.json();
            const newBallots: BallotInterface[] = getBallots.items.map((item: BallotInterface) => {
                item.selected = null;

                return item as any;
            });
            setBallots(newBallots);
        })();
    }, []);

    const onSelectItem = (ballotId: string) => (itemId: string) => () => {
        const newBallots = ballots.map((ballot: BallotInterface) => {
            if (ballot.id == ballotId)
                ballot.selected = itemId;

            return ballot;
        });

        setBallots(newBallots);
    }

    const onSubmitBallots = () => {
        const awardedBallots: Array<AwardedBallotInterface> = [];
        ballots.map((ballot: BallotInterface) => {
            if (ballot.selected) {
                const selectedItem: string = ballot.items.find((item: BallotItemInterface) => item.id == ballot.selected)?.title as string;
                awardedBallots.push({ title: ballot.title, selected: selectedItem });
            }
        });

        dispatch(submitAwards({ items: awardedBallots }));

        setOpenResults(true);
    }

    return (
        <>
            <Head>
                <title>Take Home Test</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <MainTag>
                <div className="container">
                    <div className="row">
                        <h1 className="text-center">AWARDS 2021</h1>
                    </div>

                    {
                        ballots.length > 0 && ballots.map((ballot: BallotInterface) =>
                            <Fragment key={ ballot.id }>
                                <div className="row">
                                    <div className="col">
                                        <h3 className={ styles.category }>
                                            { ballot.title}
                                        </h3>
                                    </div>
                                </div>

                                <div className="row">
                                    {
                                        ballot.items.length && ballot.items.map((item: BallotItemInterface) =>
                                            <div className="col-lg-4 col-sm-6 col-12" key={ item.id }>
                                                <Nominee item={ item } onSelect={ onSelectItem(ballot.id) } />
                                            </div>
                                        )
                                    }
                                </div>
                            </Fragment>
                        )
                    }
                </div>

                <button data-testid="submit-ballot" className={ `btn ${styles['submit-ballot']}` } onClick={ onSubmitBallots }>Submit Ballot</button>
                <ResultModal open={ openResults } onClose={ () => setOpenResults(false) } />
            </MainTag>
        </>
    )
}

export default Awards;